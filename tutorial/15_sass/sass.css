/* SASS: Syntactically awesome style sheets
    - is a library to extend CSS during development
    - does not run in the browser but is compiled to CSS
    - can be installed via "npm install -g sass"

    - SASS vs. SCSS
      They just differ in syntax. SASS works with indentation (that identifies which attribute belongs to which selector) and no semicolons. 
      SCSS looks the same as CSS. To switch from one to another, the file ending is either .sass or .scss
        SASS:
            body
                font-size: 1rem

        SCSS:
            body{
                font-size: 1rem;
            }

    - Compiling: SASS files need compiling. A .css file and a .css.map file is created. Make sure you are in the correct directory (where the file is located).
        - Command:
            sass <filename_with_sass_code> <css_filename_to_compile_into>
        - To activate watch mode (to automatically compile on chang), write this:
            sass --watch <filename_with_sass_code>:<css_filename_to_compile_into>
          Stop the watch mode with ctrl + C
        - Usually in a project the compilation is done via sass loader (not part of the tutorial)

    - Nesting selectors: 
        - Selectors can be nested into each other for better readability.
            body li{} is written like this

            body{
                li{}
            }

        - Direct selectors need an ampersand:
            body.title{} is written like this

            body{
                &.title{ }
            }

            ---or---

            button:hover{} is written like this

            button{
                &:hover{ }
            }



    - Nesting namespace properties:
        body{
            flex-direction: column;
            flex-wrap: nowrap;
        }
        can be written like this:
        body{
            flex:{
                direction: column;
                wrap: nowrap;
            }
        }

    - Variables: 
        - Can be defined with a dollar sign.
            $primary-color: #521751;
            h1 {
                color: $primary-color;
            }
        - Can hold lists as values:
            $border-default: 1px solid black;
        - Can be used with another variable:
            $primary-color: #521751;
            $border-default: 1px solid $primary-color;
        - A map of variables can be defined for nicer grouping of related values:
            $colors: (
                primary: #523485,
                secondary: #782345,
            );
            The map can be addressed with get-map(<name_of_map>, <key_from_map>):
            h1 {
                color: map-get($colors, primary)
            }
    - Built-in functions:
        They can be used to e.g. change values programmatically, such as lighten/darken colors or change the transparency.
        .darken {
            background-color: scale-color($origin-color, $lightness: -30%);
        }
        .lighten {
            background-color: scale-color($origin-color, $lightness: 30%);
        }
        .transparentize {
            background-color: transparentize($origin-color, $amount: 0.8);
        }

    - Calculations:
        Values can be calculated:
        .calculateMargin {
            margin-left: $origin-margin * 2;
        }

    - Partials can be used to make css files e.g. their included variables accessible from other css files. See folder "partials"
      Partials are named with an underscore 
        e.g. _globalColors.scss
      and can be imported like this
        @import 'globalColors';
      Usually reusable variables are stored in partials and can be accessed in the scss file where the partial was imported.
      Scss files can be imported into other scss files without the need to compile the imported files separately.

    - Imports:
        When importing a css file, this file has to be retrieved separately (which can be seen in the network tab in the dev console)
            e.g. import 'someFile.css'
        When a scss file is imported, the code of the imported file is copied into the file with the import. This means that there
        will only be one file requested.

    - Media queries:
        They can be positioned together with (or rather inside) the code they effect which makes it more readable:
            h1{
                width: 5rem;
                media(min-width: 40rem){
                    width: 10rem;
                }
            }

    - Inheritance:
        When several attributes are the same for different elements, a class is usually added to every element that needs it. Instead of 
        this approach, css styles can inherit from other styles using @extend
            .classToInheritFrom {
                background-color: yellow;
            }
            .inheritingClass {
                @extend .classToInheritFrom;
                color: blue;
            }

    - Mixins are self-defined, reusable code snippets. The code from it is added directly into the style.
        - A mixin can be defined like this:
                @mixin display-flex() {
                    display: -webkit-box;
                    display: -ms-flexbox;
                    display: -webkit-flex;
                    display: flex;
                }
            and used with @include like this:
                .useMixin{
                    @include display-flex();
                }
            which will result in this compiled css code:
                .useMixin {
                    display: -webkit-box;
                    display: -ms-flexbox;
                    display: -webkit-flex;
                    display: flex;
                }
        - Parameters can be passed into a mixin with $parameterName:
            @mixin media-min-width($width) {
                @media (min-width: $width) {
                    font-size: 2rem;
                }
            }
        - Mixins can have dynamic content:
            @mixin media-min-width() {
                @media (min-width: 40rem) {
                    @content
                }
            }
          which can be handed over in curly brackets(=braces):
            .usingMediaMinWidthMixin {
                @include media-min-width() {
                    font-size: 5rem;
                }
            }
}

*/
/* Nesting */
body {
  font-size: 1rem;
}
body .title {
  color: #004C78;
}

/* Nesting a direct accessor */
button {
  background-color: #004C78;
}
button:hover {
  background-color: #80B3D0;
}

/* Nesting namespace properties */
.fontNamespace {
  font-size: 1rem;
  font-weight: 100;
  font-variant: small-caps;
}

/* Variables */
/* Variables can hold a list of values */
/* Variables can consist of other variables */
.variable {
  color: #80B3D0;
  border: 2px solid #004C78;
}

.variableWithVariable {
  border: 2px solid #80B3D0;
}

/* A map of related variables can be created.. */
.map {
  color: #6558ea;
}

/* Built-in function: */
.origin {
  background-color: #457ed0;
}

.darken {
  background-color: #27579b;
}

.lighten {
  background-color: #7da5de;
}

.transparentize {
  background-color: rgba(69, 126, 208, 0.2);
}

.originMargin {
  margin-left: 2rem;
}

.calculateMargin {
  margin-left: 4rem;
}

/* Partials can be used to store global values */
.coloredWithGlobalColor {
  color: yellowGreen;
}

/* Inheritance */
.classToInheritFrom, .inheritingClass {
  background-color: yellow;
}

.inheritingClass {
  color: blue;
}

/* Mixins can be defined this way */
/* and used like that */
.useMixin {
  display: -webkit-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

/* A mixin with a parameter */
.useFontSizeMixin {
  font-size: 3rem;
}

/* Dynamic content can be passed to a mixin */
@media (min-width: 40rem) {
  .usingMediaMinWidthMixin {
    font-size: 5rem;
  }
}

/*# sourceMappingURL=sass.css.map */
