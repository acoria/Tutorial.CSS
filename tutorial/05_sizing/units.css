/* There are six different types of units:
    - pixels (px)
    - root em (rem) refers to the browser font size
    - em (em) refers to the inherited font size of its ancestor multiplied its own em-value
    - percentage (%) of the surrounding containers, depending on their position (see below)
    - viewport height (vh) / viewport width (vw)
    - auto to align element in the center

    For percentage values, the surrounding containers are used for reference:
        - Elements with "position: fixed" have the viewport as reference/containing block and 100% will result in the entire screen to be use.
        - Elements with "position: absolute" use the ancestor (their content + padding) as reference/containing block.
	      The ancestor is the next surrounding element with a position other than static, so absolute, relative, fixed or sticky
        - Elements with "position: static/relative" use the ancestor (only their content) as reference/containing block.
	      The ancestor is the next surrounding "block" level element.
    
    For box-shadows/borders defining px is fine, since it does not add to any readability when the font size is increased.

    This is a list of properties with their recommended units:
        font-size     rem
        padding       rem
        margin        rem
        border        px
        width         %/vw
        height        %/vh
        top/bottom    %
        left/right    % 
*/

* {
    box-sizing: border-box;
}

body {
    margin: 0;
}

/* fixed element that stretches over entire screen because it uses the viewport as containing block */
.fixed-element {
    background-color: blueviolet;
    color: white;
    position: fixed;
    width: 100%;
    height: 100px;
    top: 0;
}

.relative-element {
    background-color: blue;
    color: white;
    position: relative;
    margin-top: 100px;
    display: inline-block;
    padding: 20px;
    width: 800px;
    height: 200px;
}

/* Absolute element with width of 50% of the surrounding element because this is its containing block (having position relative).
   The padding of the surrounding container is included in the width for the calculation, so it is exactly half of 800px -> 400px */
.absolute-element {
    background-color: green;
    position: absolute;
    width: 50%;
    bottom: 0;
}

.block-level-element {
    width: 1000px;
    height: 250px;
    padding: 50px;
    background-color: yellow;
}

/* relative element with a width of 50% of the div-block-level-element (not the a, which is an inline level element) 
   Since the block-level-element is 1000px wide but has 50px padding on each side, the content is 900px wide.
   This leads to 450px for the relative element (50%) */
.relative-element-inside-block {
    position: relative;
    background-color: red;
    width: 50%;
}

/* The viewport can be used for defining a width/height depending on the viewport (so the visible browser window size).
   The value is the percentage of the viewport */
.viewport {
    width: 20vw;
    height: 20vh;
    background-color: rgba(138, 43, 226, 0.5);
}

/* Viewport minimum: this checks which side the the smallest one is (for desktop pc's mainly the height).
   This means that the unit becomes vh. So for the following configuration, the width has a maximum of 80vh.
   This switches when the width is minimized by pulling the window. When the width gets smaller than the height, 
   the unit switches and the view gets smaller. (the use case is not quite clear yet. It seems to be useful for mobile orientation) */
.vmin {
    width: 80vmin;
    height: 20vh;
    background-color: rgba(138, 43, 226, 0.3);
}

/* 2rem will result in 32px for the default browser font-size of 16px (2rem x 16 = 32px) */
.rem-sizing {
    font-size: 2rem;
}