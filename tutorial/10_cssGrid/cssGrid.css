/* The CSS grid allows for two-dimensional positioning of elements inside a grid along the vertical or horizontal axis.
   A various number of rows and columns can be defined. Elements inside the cells can be defined to span over several cells. 
   If more than one element needs to be positioned inside a cell, simply wrap it inside a div.

    - An element can be turned into a grid using "display:grid".
      If e.g. the body is turned into a grid, only the non-static elements (elements not part of the document flow) will be turned into grid elements.

    - Columns/rows can be defined with "grid-template-columns/rows" in different ways:
        - px/rem
        - %: of the entire grid
        - fr: fraction. If there is only one fraction, it takes the remaining space. If there is more than one, it acts as a weight
              and the fraction parts split up the space according to their fraction/weight.
        - auto: Forces an element to fill the rest of the remaining space (for the height only if the height of the parent is defined).
                If only fractions are defined and auto, auto will take only as much space as required for the content.
        - repeat(times, pattern): This creates columns by repeating a pattern for a defined amount of times. 
            E.g. for two equal columns, one could write "50% 50%" or instead repeat(2, 50%)
            This can be any pattern ("20% 20%" or "20rem" or "2fr")
            For cases where the amount of columns is not clear, auto-fill or auto-fit can be used.
                - auto-fill: 
                    repeat(auto-fill, 10rem): Will fit as many columns as fit the contents of the elements into the line.
                - auto-fit:
                    repeat(auto-fit, 10rem): Same as auto-fill but it will also center the columns (especially useful if there are less columns than the entire width).

        - minmax(minium value, maximum value): This can be used to define a minimum and a maximum value. It will always be ensured that 
          it has the minimum size and if there is enough space, the maximum will be used.
            Anything can be put as the value: px, rem, %, fr, auto
        - fit-content(value): Can be used to make an element fit into a cell if it is usually smaller but might change to a bigger size with a media query.
            It extends its size if the contents needs the space, otherwise it uses as much space as needed. 

    - Define where to position an element inside the grid with "grid-column-start/end" and "grid-row-start/end":
        Elements per default span over one column and one row but can span over more cells by defining
            - grid-column-start: starting column
            - grid-column-end: ending column e.g. 3
                - An alternative would be to define the cells it should span
                e.g. grid-column-end: span 2
                - Columns can also be defined by using negative values. -1 means the rightmost column, so it automatically spans all the way to the end.
                grid-column-end: -1; This will let it end at the end of the last cell.
            - grid-row-start: starting row
            - grid-row-end: ending row

    - Rows and columns can be given names to address them in []
        - A grid like this    
            column 1 | column 2
          could be named like that
            grid-template-columns: [column-1-start] 1fr [column-1-end column-2-start] 2fr [column-2-end]
          and be addressed like this
            grid-column-start: column-1-start;
            grid-column-end: column-2-end;
        - There can be as many names defined as needed for one column/row.
        - In the repeat function, they can also be used like this
            grid-template-columns: repeat(4, [col-start] 1fr [col-end]);
          and addressed like that
            grid-column-start: col-start 1;
            grid-column-end: col-end 3;

    - Overlapping:
        - The grid per default tries to avoid overlapping.    
        - Elements can overlap, if all values (grid-column-start/grid-column-end, grid-row-start, grid-row-end) are explicitly defined and overlap that way.
          The last element in the html wins.
        - A z-index can be defined (the grid supports it without any position-attribute e.g. relative) to change the overlapping priority.

    - Gaps:
        Allows for spacing between columns and rows by defining
            grid-column-gap/grid-row-gap: 1rem;

    - Shorthands:
        - grid-row-start/end
            grid-row: row-1-start / row-2-end
        - grid-column-start/end
            grid-column: 1 / -1

        - grid-row-start/end & grid-column-start/end
            Can be shortened with grid-area
                grid-row-start / grid-column-start / grid-row-end / grid-column-end 
            grid-area: row-1-start / column-1-start / row-1-end / column-1-end

        - grid-row-gap/grid-column-gap
            Can be shortened with row gap | column gap 
                grid-gap: 1rem 1rem
            or just one value for both row and column
                grid-gap: 1rem
    
    - Grid area templates:
        - A template can be defined for an entire area. The DOM order defined in the html is ignored for this setup.
          For a layout like this
                |       Header              |
                | Sidebar |    Main content |
                |       Footer              |
          A template can be defined like that
            grid-template-areas: "header header header"
                                 "sidebar main main"
                                 "footer footer footer";
          It is build like a table. So in this example there are three columns and three rows. There have to be as many words as cells to define it.
        - If a part of the grid does not need addressing, the name can be omitted by putting a . like this
                grid-template-areas: "header header header"
                                    ". main main"
                                    "footer footer footer";
        - Defining areas like above is especially useful for mobile responsiveness because the areas are referenced by the names and 
          all that needs to be changed for the mobile approach is the "grid-template-areas" to e.g. more rows. 
          The overriding of column/row-start/end is therefore unnecessary.
        - Areas can be generated automatically by following the name pattern with a name ending with -start/-end like this
            grid-template-rows: [hd-start] repeat(3, 3vh) [hd-end];
            grid-template-columns: [hd-start] repeat(4, 1fr) [hd-end];
          and then can be addressed like that
            grid-area: hd;
        
    - Positioning:
        - the entire grid when the container is bigger than space the cells occupy:
            In the container, define
            - justify-content: aligns the grid along the x-axis with start, center or end
            - align-content: aligns the grid along the y-axis
        - all elements inside their grid cells:
            In the container, define
            - justify-items: aligns elements along the x-axis (stretch (is the default), start, center, end)
            - align-items: aligns elements along the y-axis
        - a single element inside its grid cell:
            For the element, define
            - justify-self: aligns an element along the x-axis inside its cell
            - align-self: aligns an element along the y-axis inside its cell
    
    - Sizing of rows/columns:
        - grid-auto-rows/columns: Defines a size for all rows/columns
            - auto: is the default
            - a size in rem, px etc.
            - minmax can be used to define a minimum and maximum size
        - It will not override any explicitly set values for not automatically added rows:
            e.g. grid-template-rows: repeat(2, 20vh) will not be overridden. Only the automatically added rows will have the defined auto-size. 

    - Implicit grid (vs. explicit grid):
        There is an explicit grid and an implicit grid. With "grid-template-*" the explicit grid is defined and elements are filled according to this grid.
        However, if there are more elements than fit in the explicitly defined grid, they are implicitly added into the implicit grid.
        The implicit grid is defined with "grid-auto-*"
            - Flow: Decides in which direction the grid should expand if there are not enough grid cells defined.
                grid-auto-flow: row or column
                    - row: default, which causes more rows to be added for additional elements (is a good approach for mobile)
                    - column: will result in more columns to be added because the grid expands in column direction
            - Dense grid: Ensures that the spaces inside the grid are used as effectively as possible to make the grid as dense as possible.
              Usually The elements respect the order defined in the DOM, so empty spaces can occur if e.g. an element spans over two columns but there is only 
              one space left. If the element was placed explicitly by defining "grid-column-start/end", a fitting element would fill the gap. But per default,
              an empty space is left. This behavior can be overridden
                    - grid-auto-flow: column dense: The dense causes it to fill more densely.
              Careful: This will confuse screen readers (accessibility) because they read the DOM and not the visual change.
            - Columns/rows: Defines the size of all implicitly added rows/columns.
                grid-auto-rows/columns
*/

.grid-container {
    display: grid;
    /* this defines 5 columns. The %-value is the percentage of the total of the grid's width. */
    grid-template-columns: 300px 10rem 20% 1fr 2fr;
    /* this defines the grid's rows */
    grid-template-rows: 3;
}

.container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
}

/* auto will fill the rest of the column */
.auto-fill {
    display: grid;
    grid-template-columns: 100px auto;
}

/* auto will take only the required space of an element if fractions are defined */
.auto-with-fractions {
    display: grid;
    grid-template-columns: 1fr 1fr auto;
}

/* elements can span over more than one cell */
.span-over-more-cells-absolute {
    grid-column-start: 1;
    grid-column-end: 3;
    /* an alternative is "span over two cells" */
    /* grid-column-end: span 2; */
    grid-row-start: 1;
    grid-row-end: 3;
}

/* span to -1, so the end of the grid */
.span-to-minus1 {
    grid-column-start: 2;
    grid-column-end: -1;
}

/* an alternative for spanning over several cells */
.span-over-more-cells-span {
    grid-column-start: 1;
    grid-column-end: span 2;
}

/* A pattern to define the columns/rows can be repeated */
.repeat {
    display: grid;
    grid-template-columns: repeat(2, 50%);
    /* an alternative: */
    /* grid-template-columns: repeat(2, 1fr); */
}

/* when explicitly defined with columns/rows, elements can overlap */
.overlap-from-left {
    grid-column-start: 1;
    grid-column-end: 3;
    grid-row-start: 1;
    grid-row-end: 2;
    z-index: 1;
}

.overlap-from-right {
    grid-column-start: 2;
    grid-column-end: 4;
    grid-row-start: 1;
    grid-row-end: 2;
}

/* in [] is the name of the row that follows. It can have more than one name. */
.named-row-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: [row-1-start] 1fr [row-1-end row-2-start] 1fr [row-2-end] 1fr;
}

.named-row1 {
    grid-row-start: row-1-start;
    grid-row-end: row-1-end;
}

.named-row2 {
    grid-row-start: row-2-start;
    grid-row-end: row-2-end;
}

/* adds gaps between columns */
.column-gaps {
    grid-column-gap: 1rem;
}

/* areas can be defined using strings.
    |       Header                 |
    | Sidebar |    Main content    |
    |       Footer                 | */
.area-template-container {
    display: grid;
    grid-template-areas: "header header header"
        "sidebar main main"
        "footer footer footer";
}

.area-template-header {
    grid-area: header
}

.area-template-sidebar {
    grid-area: sidebar;
}

.area-template-main {
    grid-area: main;
}

.area-template-footer {
    grid-area: footer;
}

/* Named columns can be used with repeat... */
.named-column-repeat-container {
    display: grid;
    grid-template-columns: repeat(4, [col-start] 1fr [col-end]);
}

/* ...and can be addressed by number behind the name. This stretches over three cells. */
.named-column {
    grid-column: col-start 1 / col-end 3;
}

.generated-grid-area-container {
    display: grid;
    grid-template-rows: [hd-start] repeat(3, 3vh) [hd-end];
    grid-template-columns: [hd-start] repeat(4, 1fr) [hd-end];
}

.generated-grid-area {
    grid-area: hd;
}

/* Positions the entire grid inside its container because it occupies less space than its surrounding container */
.positioning-the-entire-grid {
    height: 25vh;
    background-color: lightgray;
    display: grid;
    grid-template-rows: repeat(2, 10vh);
    grid-template-columns: repeat(2, 20vw);
    justify-content: end;
    align-content: center;
}

/* Positions the content of the grid along the horizontal and vertical axis */
.positioning-inside-cells-container {
    background-color: lightgray;
    display: grid;
    grid-template-rows: repeat(2, 5vh);
    grid-template-columns: repeat(2, 1fr);
    justify-items: end;
    align-items: center;
}

/* Positioning a single element inside its grid cell */
.positioning-single-element-container {
    display: grid;
    grid-template-rows: 10vh 1fr;
    grid-template-columns: repeat(2, 1fr);
}

.positioning-single-element {
    justify-self: center;
    align-self: center;
}

/* Will tell the grid to automatically expand by adding columns */
.auto-flow-column-container {
    display: grid;
    grid-template-columns: repeat(2, 20vw);
    grid-auto-flow: column;
    /* this spaces the automatically added columns evenly. This will not override the explicitly set column widths in the top */
    grid-auto-columns: 1fr;
}

/* This defines a height of 3rem for the first row (explicit grid) and 4rem for all other rows (implicit grid) */
.implicit-grid-auto-row-container {
    display: grid;
    grid-template-rows: 3rem;
    grid-auto-rows: 4rem;
}

/* Dense Grid: a non-dense grid will leave gaps because the DOM order is respected... */
.non-dense-grid-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-auto-rows: 3rem;
}

.non-dense-grid-element1 {
    grid-column: span 2;
}

.non-dense-grid-element2 {
    grid-column: span 2;
}

/* ...explicitly positioned elements will leave no gap...*/
.explicit-non-dense-grid-element2 {
    grid-column: 1 / 3;
    grid-row: 2 /3;
}

/* ...a dense grid will fill the empty gaps for non-explicitly positioned elements (so it will ignore the DOM default order and fit as many elements as possible . */
.dense-grid-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-auto-rows: 3rem;
    grid-auto-flow: row dense;
}

.dense-grid-element1 {
    grid-column: span 2;
}

.dense-grid-element2 {
    grid-column: span 2;
}

.element1 {
    background-color: #0066A1;
}

.element2 {
    background-color: #457ed0;
}

.element3 {
    background-color: #80B3D0;
}

.element4 {
    background-color: #6558ea;
}

.element5 {
    background-color: #004C78;
}

.element6 {
    background-color: #94b8d7;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

body div {
    padding: 0.3rem;
}

h3 {
    margin-bottom: 0.3rem;
    font-size: small;
}