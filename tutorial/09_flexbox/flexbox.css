/* Flexbox allows for one-dimensional positioning of elements along a vertical or horizontal axis. 

    The wrapper for a flexbox is the flex container. All elements inside are the flex items.

    The default when applying display: flex/inline-flex sets the two attributes automatically:
        - flex-direction: row;
        - flex-wrap: nowrap;
    There is a shorthand for the two attributes:
        - flex-flow: row nowrap;

    There is a main-axis and a cross-axis. They always start in the same corner and are perpendicular.
    Per default, the "row" direction places the main-axis on the left and when there is not enough space, 
    the elements are wrapped along the cross axis, which also starts in the left corner and goes down.
    For e.g. row-reverse, the main-axis is placed in the right corner and wrapping items will place themselves
    down from there on the right side.

    Flex-container properties (parent):
        justify-content: defines the position of the elements along the main-axis. 
            - center, flex-start/end, baseline, space-evenly, space-between etc.

        align-items: defines the position of the elements along the cross-axis.
            - stretch: is the default and stretches all elements along the cross-axis.
            - center: aligns all items in the middle of the cross-axis
            - flex-start: aligns all items at the start of the cross-axis
            - flex-end: aligns all items at the end of the cross-axis
            - baseline: aligns the items along the elements content (e.g. text).

        align-content: decides about the alignment on the cross-axis when there is more than one row.
            - normal: is the default
            - center: align them all centered
            - flex-start/end: move elements to the start or end
            - space-evenly: put an equal space between the start, end and in between
            - space-between: put only space between the first and second row but not at the start or end
            - etc.
    
    Flex items properties (children):
        - order: specifies the order of a child in a container. The higher the number, the later it is positioned (further right or down, depending on the direction)
          0 is the default. Negative and positive values are possible.
        - align-self: allows an element to be positioned in relation to the cross axis of its surrounding container 
        - flex-grow: distributes remaining space according to the weight defined in flex grow.
          The default is 0 which means it will not use any of the remaining space (keep its size).
        - flex-shrink: defines if an element can shrink and at which ratio.
          A value of 0 defines that an element cannot shrink and keeps its defined size.
          The default is 1. Any value bigger than 0 defines that the element can shrink. If there is more than one element with a shrink-value, 
          they shrink with these ratios.
        - flex-basis: the size of an element depending on the main axis.
            - auto: The defined width or height (depending on the orientation) will be applied, referring to the main axis.
            - a size, such as px/rem/%: The element will have this defined sized in the main axis direction.

        - shorthand for flex-grow | flex-shrink | flex-basis:
            e.g. flex: 0 1 auto;
*/

/* This is the default flex flexbox behavior. The items inside the flex container are aligned horizontally. */
.flex-container_default {
    display: flex;
    /* this is the default:
    flex-wrap: nowrap;
    flex-direction: row; */
}

/* The inline-flex flexbox behavior is the equivalent to inline-block. 
   It takes up only the necessary space */
.flex-container_inline-flex {
    display: inline-flex;
}

/* If there is not enough space, the elements are wrapped into the next line.
   The height of the bottom elements is also only as big as their content. */
.flex-container_wrap {
    max-width: 500px;
    display: flex;
    flex-wrap: wrap;
}

/* If a bigger element is added to a line, the other elements take up the same space. */
.flex-container_wrap-height {
    max-width: 450px;
    display: flex;
    flex-wrap: wrap;
}

/* This switches the direction, causing the smaller elements to dock to the bottom */
.flex-container_wrap-reverse {
    display: flex;
    flex-wrap: wrap-reverse;
}

.flex-container_wrap-default {
    display: flex;
    flex-wrap: wrap;
}

/* This swaps the order of the items from last to first and aligns them horizontally */
.flex-container_row-reverse {
    display: flex;
    flex-direction: row-reverse;
}

/* This aligns all elements vertically */
.flex-container_column {
    display: flex;
    flex-direction: column;
}

/* This swaps the order of the items from last to first and aligns them vertically. */
.flex-container_column-reverse {
    display: flex;
    flex-direction: column-reverse;
}

.flex-container_align-items {
    display: flex;
    flex-wrap: wrap;
    height: 500px;
    flex-direction: row;
    justify-content: flex-start;
    align-items: flex-end;
    /* default */
    /* align-content: normal; */
    /* align-content: space-between; */
}

.order {
    display: flex;
}

/* puts this element in the front because the order of the items is lowest to highest number */
.second-element {
    order: -1;
    background-color: #0066A1;
}

.first-element {
    background-color: #457ed0;
}

.align-itself {
    display: flex;
    align-items: center;
}

/* allows the positioning of an individual element on the cross axis */
#to-top {
    align-self: flex-start;
}

/* So if there is 400px spare space to fill because each element takes about 100px... */
.flex-grow {
    display: flex;
    width: 700px;
    padding: 0;
}

/* ...0 is the default and will not use any more space than its content... */
#flex-grow0 {
    flex-grow: 0;
    background-color: #004C78;
    margin: 0;
}

/* ...flex-grow: 1 will occupy 1/4 of the remaining space... */
#flex-grow1 {
    flex-grow: 1;
    background-color: #6558ea;
    margin: 0;
}

/* ...and flex-grow: 3 will occupy 3/4 of the remaining space... */
#flex-grow3 {
    flex-grow: 3;
    background-color: #457ed0;
    /* width: 200px; if you add a width to the element, its theoretical space gets bigger, resulting in the remaining
    space to be smaller. Therefore it will increase in size and the element before it will be smaller */
    margin: 0;
}

/* When there is not enough space for all elements (3 times 150px) the elements shrink */
.flex-shrink {
    display: flex;
    padding: 0;
    width: 388px;
}

/* This element does not shrink because of its shrink value of 0  */
#flex-shrink0 {
    flex-shrink: 0;
    background-color: #004C78;
    margin: 0;
    width: 150px;
}

/* This element shrinks with a ratio of 1 */
#flex-shrink1 {
    flex-shrink: 1;
    background-color: #6558ea;
    margin: 0;
    width: 150px;
}

/* This element shrinks with a ratio of 4, so 4 times more than the element next to it */
#flex-shrink3 {
    flex-shrink: 3;
    background-color: #457ed0;
    margin: 0;
    width: 150px;
}

.flex-basis{
    display: flex;
}

#flex-basis_auto{
    background-color: #457ed0;
    width: 150px;
    height: 100px;
    flex-basis: auto;
}

#flex-basis_300{
    background-color: #004C78;
    width: 150px;
    height: 100px;
    flex-basis: 300px;
}

/* Example: split to left and right and keep some content in the middle */
.example-flex-split{
    display: flex;
    justify-content: center;
}
.example-flex-split div{
    background-color: #004C78;
    height: 100px;
    width: 100px;
}

.example-flex-split :first-child{
    margin-right: auto;
}
.example-flex-split :last-child{
    margin-left: auto;
}

* {
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

h1 {
    margin: 0.5rem 0 0.2rem 0;
    font-size: 1rem;
}

div {
    background-color: #0a725f;
    margin: 0.5rem;
    border: 2px solid black;
    padding: 0.5rem;
}

.normal-div {
    background-color: #004C78;
}

.width100 {
    background-color: #0066A1;
    width: 100px;
}

.height100 {
    background-color: #6558ea;
    height: 100px;
}

.width_height150 {
    background-color: #457ed0;
    width: 150px;
    height: 150px;
}

.width200 {
    background-color: #80B3D0;
    width: 200px;
}

.width200_2 {
    background-color: #94b8d7;
    width: 200px;
}