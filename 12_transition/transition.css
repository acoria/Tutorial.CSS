/* Transitions can be used to change an elements state e.g. visible to invisible, position x to position y. 
   To make a transition work, a property, such as opacity or transform has to be changed by either setting it via javascript directly or applying a class that overrides the
   previous state with javascript (e.g. sets "opacity:0" to "opacity:1").
    - The transition function have these parameters:
        - transition-property: for which property the transition should be applied, e.g. opacity, transform
        - transition-duration: how long should the transition take
        - transition-timing-function: decide if a transition should be equally distributed over the time, faster towards the start or the end etc.
          This is an optional parameter.
            - ease: ##? This is the default
            - ease-in: starts slowly and accelerates until the end 
            - ease-out: starts quickly and slows down towards the end
            - linear: an even speed throughout the transition
            - cubic-bezier: a self-defined cubic-Bezier curve
            - see https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function for more options, such as self-defined steps
            - see https://easings.net/ for the cheat sheet of more special easing functions and how they translate to cubic-bezier
        - transition-delay: how long should be waited until the transition starts
          This is an optional parameter.
    - This is an example:
        transition: opacity 200ms ease-in 0.5s  
    - multiple properties can be defined.
        transition: opacity 200ms, transform 300ms
    
    - When changing the element property to or from "display:none", transitions will be ignored because the element is not part of the document flow and immediately removed or added. 
      Opacity has to be used but keep in mind that this only makes an element invisible. For e.g. a backdrop, it will still be there blocking other elements. A workaround is to set
      a timeout for changing the display-property to ensure the transitions are made and then the element is hidden afterwards.

*/

/* toggle opacity of an element */
.visibleBox {
    opacity: 1;
    transition: opacity 1s;
}

.invisibleBox {
    opacity: 0;
}

/* move the position of an element */
.leftTogglePositionBox {
    transform: translateX(0rem);
    transition: transform 1s;
}

/* ease-in of an element */
.leftBoxEaseIn {
    transform: translateX(0rem);
    transition: transform 1s ease-in;
}

.leftBoxEase {
    transform: translateX(0rem);
    transition: transform 1s;
}

.leftBoxLinear {
    transform: translateX(0rem);
    transition: transform 1s linear;
}

.leftBoxEaseOut {
    transform: translateX(0rem);
    transition: transform 1s ease-out;
}

.leftBoxCubicBezier {
    transform: translateX(0rem);
    transition: transform 1s cubic-bezier(.29, 1.01, 1, -0.68);
}

.rightBox {
    transform: translateX(10rem);
}

.toggleBoxContainer {
    display: flex;
    height: 5rem;
    margin-bottom: 1rem;
}

.box {
    display: inline-block;
    background-color: #004C78;
    width: 8rem;
    margin-left: 1rem;
}

.boxContainer {
    width: 8rem;
    display: flex;
    flex-direction: column
        /* align-items: stretch; */
}

.boxContainer .box {
    height: 2rem;
    margin-bottom: 0.5rem;
}

button {
    width: 15rem;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

h1 {
    font-size: small;
}

div {
    color: white;
    text-align: center;
}