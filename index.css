/*
    CSS rules consist of the following elements:
        - selectors (e.g. div, .class, #id)
        - properties (e.g. background-color, margin, width)
        - values (e.g. red, 10px, 30%)

    Properties are listed here: https://developer.mozilla.org/en-US/docs/Web/CSS
    Browser support can be checked here: caniuse.com (market share: it also shows how much of the market you reach with a certain css/js-feature)

    Best practices:
        - Put the more general rules at the top and go down to more specific rules
        - Use "*" to change the default to "box-sizing: border-box;" so that all spacing applied always includes content, padding and border
        - Use css classes instead of ids or tags wherever possible. They are reusable and affect css only.
          Ids can be used when they already exist but never just introduce them for styling reasons. They are not only css-specific but used for other things.
        - Never use !important unless it is e.g an edge-case of having to change a badly written third-party library
        - Use :not() rarely because it can in most cases be written in a positive way, which is much easier to maintain
        - When importing 2 css files of which one is a shared css file for several components, always add the shared one first and then the more specific 
          css file. This way you have the possibility to override styles from the more general shared css file because when there are two selectors for the same element,
          the last style defined in the code (the last import) wins.

    Naming conventions:
      - use kebab-case because css is case-insensitive
      - name by feature e.g. .page-title not by style such as .title-blue

    CSS Variables: 
        - Can be used to specify a value once and use it everywhere
        - Is defined starting with two dashes -- and the variable name
        - To define it, it should be put on the root-selector. This way it is usable within every element selector.
            :root{
                --some-variable: #642472;
            }
          It could also be placed on a specific element selector, but than it would only be usable within it.
        
        - To use the variable, the var()-function is used. It takes one-two arguments. The first one is the variable name.
          The second is a fallback value. It can be used for cases where the variable was not defined, e.g. for 3rd party libraries
          where it is not clear if a variable was really set.
            color: var(--some-variable);
            color: var(--some-variable, #642472);
*/

/* CSS variable definition */
:root {
  --some-variable: #642472;
}

/* CSS variable usage */
h1 {
  color: var(--some-variable);
  /* with fallback for missing variable */
  color: var(--some-variable, green);
}