/* SASS: Syntactically awesome style sheets
    - is a library to extend CSS during development
    - does not run in the browser but is compiled to CSS
    - can be installed via "npm install -g sass"

    - SASS vs. SCSS
      They just differ in syntax. SASS works with indentation (that identifies which attribute belongs to which selector) and no semicolons. 
      SCSS looks the same as CSS. To switch from one to another, the file ending is either .sass or .scss
        SASS:
            body
                font-size: 1rem
        
        SCSS:
            body{
                font-size: 1rem;
            }

    - Compiling: SASS files need compiling. A .css file and a .css.map file is created. 
        Command:
            sass <filename_with_sass_code> <css_filename_to_compile_into>
        To activate watch mode (to automatically compile on save), write this:
            sass --watch <filename_with_sass_code>:<css_filename_to_compile_into>
        Stop the watch mode with ctrl + C
            
    - Nesting: Selectors can be nested into each other for better readability.
        body li{} becomes

        body{
            li{}
        }
    
    - Nesting namespace properties:
        body{
            flex-direction: column;
            flex-wrap: nowrap;
        }
        can be written like this:
        body{
            flex:{
                direction: column;
                wrap: nowrap;
            }
        }
    
    - Variables: 
        - Can be defined with a dollar sign.
            $primary-color: #521751;
            h1 {
                color: $primary-color;
            }
        - Can hold lists as values:
            $border-default: 1px solid black;
        - Can be used with another variable:
            $primary-color: #521751;
            $border-default: 1px solid $primary-color;
        - A map of variables can be defined for nicer grouping of related values:
            $colors: (
                primary: #523485,
                secondary: #782345,
            );
            The map can be addressed with get-map(<name_of_map>, <key_from_map>):
            h1 {
                color: map-get($colors, primary)
            }
    - Built-in functions:
        - They can be used to e.g. change values programmatically, such as lighten/darken colors or change the transparency.
        .darken {
            background-color: scale-color($origin-color, $lightness: -30%);
        }
        .lighten {
            background-color: scale-color($origin-color, $lightness: 30%);
        }
        .transparentize{
            background-color: transparentize($origin-color, $amount: 0.8);
*/

/* Nesting */
body {
    font-size: 1rem;

    .title {
        color: #004C78;
    }
}

/* Nesting namespace properties */
.fontNamespace {
    font: {
        size: 1rem;
        weight: 100;
        variant: small-caps;
    }
}

/* Variables */
$primary-color: #80B3D0;
/* Variables can hold a list of values */
$border-default: 2px solid #004C78;
/* Variables can consist of other variables */
$border-default-with-variable: 2px solid $primary-color;

.variable {
    color: $primary-color;
    border: $border-default;
}

.variableWithVariable {
    border: $border-default-with-variable;
}

/* A map of related variables can be created.. */
$colors: (
    primary: #6558ea,
    secondary: #457ed0,
);

.map {
    //..and addressed this way
    color: map-get($colors, primary)
}

$origin-color: #457ed0;

.origin {
    background-color: $origin-color;
}

.darken {
    background-color: scale-color($origin-color, $lightness: -30%);
}

.lighten {
    background-color: scale-color($origin-color, $lightness: 30%);
}

.transparentize{
    background-color: transparentize($origin-color, $amount: 0.8);
}